basePath: /api/v1
definitions:
  dtos.AccountActivationRequest:
    properties:
      code:
        description: 8位激活码
        example: "12345678"
        minLength: 8
        type: string
      email:
        description: 邮箱
        example: user@example.com
        type: string
    required:
      - code
      - email
    type: object
  dtos.AdminAlbumSummaryDTO:
    properties:
      album_id:
        description: 相册ID
        type: integer
      album_name:
        description: 相册名称
        type: string
      cover_image:
        allOf:
          - $ref: "#/definitions/dtos.ImageResponseDTO"
        description: 相册封面图片（最新的一张）
      created_at:
        description: 相册创建时间
        type: string
      image_count:
        description: 相册中图片数量
        type: integer
      total_size:
        description: 相册图片总大小（字节）
        type: integer
      updated_at:
        description: 相册更新时间
        type: string
    type: object
  dtos.AdminBasicSiteSettingsDTO:
    properties:
      admin_approval_required:
        type: boolean
      app_name:
        type: string
      created_at:
        type: string
      default_storage_strategy_id:
        description: 新增：默认存储策略ID
        type: integer
      email_notify_enabled:
        type: boolean
      email_verification_required:
        type: boolean
      favicon_url:
        type: string
      guest_upload_enabled:
        type: boolean
      id:
        type: integer
      logo_url:
        type: string
      notify_admin_on_pending_approval:
        type: boolean
      seo_keywords:
        type: string
      site_announcement:
        type: string
      site_description:
        type: string
      updated_at:
        type: string
      user_initial_storage_capacity_mb:
        type: integer
      user_registration_enabled:
        type: boolean
    type: object
  dtos.AdminUserCreateRequest:
    properties:
      email:
        type: string
      password:
        maxLength: 100
        minLength: 8
        type: string
      role_id:
        type: integer
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
      - email
      - password
      - role_id
      - username
    type: object
  dtos.AdminUserDetailDTO:
    properties:
      album_count:
        description: 用户相册数量
        type: integer
      created_at:
        description: 用户创建时间
        type: string
      email:
        description: 用户邮箱
        type: string
      last_upload_at:
        description: 最近上传时间
        type: string
      nickname:
        description: 用户昵称
        type: string
      total_images:
        description: 用户总图片数量
        type: integer
      total_size:
        description: 用户图片总大小（字节）
        type: integer
      unalbum_image_count:
        description: 无相册图片数量
        type: integer
      user_id:
        description: 用户ID
        type: integer
      username:
        description: 用户名
        type: string
    type: object
  dtos.AdminUserImagesOverviewResponseDTO:
    properties:
      albums:
        description: 用户的相册列表
        items:
          $ref: "#/definitions/dtos.AdminAlbumSummaryDTO"
        type: array
      unalbum_images:
        description: 没有相册的图片列表
        items:
          $ref: "#/definitions/dtos.ImageResponseDTO"
        type: array
      user:
        allOf:
          - $ref: "#/definitions/dtos.AdminUserDetailDTO"
        description: 用户详细信息
    type: object
  dtos.AdminUserResponseDTO:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      last_login_at:
        description: omitempty 如果为 nil 则不显示
        type: string
      last_login_ip:
        description: omitempty 如果为空字符串则不显示
        type: string
      nickname:
        type: string
      original_role_id:
        description: omitempty 如果为0则不显示
        type: integer
      role:
        allOf:
          - $ref: "#/definitions/dtos.RoleResponseDTO"
        description: 使用 RoleResponseDTO
      status:
        type: integer
      storage_capacity_mb:
        type: integer
      suspicious_login_notified_at:
        description: omitempty 如果为 nil 则不显示
        type: string
      updated_at:
        type: string
      used_storage_mb:
        type: number
      username:
        type: string
    type: object
  dtos.AdminUserSummaryDTO:
    properties:
      album_count:
        description: 用户相册数量
        type: integer
      created_at:
        description: 用户创建时间
        type: string
      email:
        description: 用户邮箱
        type: string
      last_upload_at:
        description: 最近上传时间
        type: string
      nickname:
        description: 用户昵称
        type: string
      total_images:
        description: 用户总图片数量
        type: integer
      total_size:
        description: 用户图片总大小（字节）
        type: integer
      user_id:
        description: 用户ID
        type: integer
      username:
        description: 用户名
        type: string
    type: object
  dtos.AdminUserUpdateRequest:
    properties:
      email:
        description: 邮箱
        type: string
      role_id:
        description: 角色ID
        type: integer
      status:
        description: 用户状态
        type: integer
      storage_capacity_mb:
        description: 存储容量 (MB)
        type: integer
      username:
        description: 用户名
        type: string
    type: object
  dtos.AdminUsersWithImagesResponseDTO:
    properties:
      users:
        description: 用户摘要列表
        items:
          $ref: "#/definitions/dtos.AdminUserSummaryDTO"
        type: array
    type: object
  dtos.AlbumResponseDTO:
    properties:
      cover_image_id:
        type: integer
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      is_public:
        type: boolean
      name:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  dtos.AssignPermissionDTO:
    properties:
      permission_id:
        description: 要分配的权限ID
        example: 101
        type: integer
    required:
      - permission_id
    type: object
  dtos.AssignRoleDTO:
    properties:
      role_id:
        description: 要分配的角色ID
        example: 1
        type: integer
    required:
      - role_id
    type: object
  dtos.AuditLogQueryResponse:
    properties:
      logs:
        items:
          $ref: "#/definitions/dtos.AuditLogResponseItem"
        type: array
      meta:
        $ref: "#/definitions/utils.PaginationMeta"
    type: object
  dtos.AuditLogResponseItem:
    properties:
      action_type:
        $ref: "#/definitions/models.AuditLogActionType"
      description:
        type: string
      details:
        description: 使用 interface{} 以便灵活处理 JSON 数据
      failure_reason:
        type: string
      id:
        type: integer
      operator_id:
        type: integer
      operator_ip:
        type: string
      operator_name:
        type: string
      status:
        type: string
      target_user_id:
        type: integer
      target_username:
        type: string
      timestamp:
        type: string
      user_agent:
        type: string
    type: object
  dtos.BasicSitePublicSettingsDTO:
    properties:
      email_notify_enabled_public:
        type: boolean
      from_email_address_public:
        type: string
      from_email_name_public:
        type: string
      smtp_port_public:
        type: integer
      smtp_server_public:
        type: string
      smtp_username_public:
        type: string
    type: object
  dtos.BatchDeleteImagesDTO:
    properties:
      image_ids:
        items:
          type: integer
        minItems: 1
        type: array
    required:
      - image_ids
    type: object
  dtos.BatchMoveImagesToAlbumDTO:
    properties:
      album_id:
        description: 使用指针以区分设置为 nil (移出相册) 和具体相册ID
        type: integer
      image_ids:
        items:
          type: integer
        minItems: 1
        type: array
    required:
      - image_ids
    type: object
  dtos.BatchUpdateImagePublicDTO:
    properties:
      image_ids:
        items:
          type: integer
        minItems: 1
        type: array
      is_public:
        type: boolean
    required:
      - image_ids
    type: object
  dtos.BatchUpdateStorageStatusDTO:
    properties:
      ids:
        items:
          type: integer
        minItems: 1
        type: array
      is_enabled:
        type: boolean
    required:
      - ids
      - is_enabled
    type: object
  dtos.BatchUploadResponseDTO:
    properties:
      failure_count:
        description: 失败上传数量
        type: integer
      failure_files:
        description: 失败上传的文件信息
        items:
          $ref: "#/definitions/dtos.UploadFailureDTO"
        type: array
      success_count:
        description: 成功上传数量
        type: integer
      success_files:
        description: 成功上传的文件信息
        items:
          $ref: "#/definitions/dtos.UploadResponseDTO"
        type: array
      total_files:
        description: 总文件数
        type: integer
    type: object
  dtos.BatchUserIDsRequest:
    properties:
      user_ids:
        description: 用户ID列表，必需且至少包含一个ID
        items:
          type: integer
        type: array
    required:
      - user_ids
    type: object
  dtos.BatchUserRejectRequest:
    properties:
      reason:
        description: 拒绝理由，可选
        type: string
      user_ids:
        description: 用户ID列表，必需且至少包含一个ID
        items:
          type: integer
        type: array
    required:
      - user_ids
    type: object
  dtos.CountryRanking:
    properties:
      count:
        type: integer
      country:
        type: string
      country_code:
        type: string
      percentage:
        type: number
    type: object
  dtos.CreateShareLinkRequest:
    properties:
      expire_days:
        description: 可选，分享有效天数
        type: integer
      resource_id:
        type: integer
      type:
        description: '"image" 或 "album"'
        enum:
          - image
          - album
        type: string
    required:
      - resource_id
      - type
    type: object
  dtos.DailyAccessStatDTO:
    properties:
      access_count:
        description: 访问总数
        type: integer
      date:
        description: "日期, 格式: YYYY-MM-DD"
        type: string
    type: object
  dtos.DailyUploadStatDTO:
    properties:
      date:
        description: "日期, 格式: YYYY-MM-DD"
        type: string
      upload_count:
        description: 上传总数
        type: integer
      upload_size:
        description: 上传总大小 (字节)
        type: integer
    type: object
  dtos.DistributionDTO:
    properties:
      geo:
        $ref: "#/definitions/dtos.GeoDistributionDTO"
      referrer:
        $ref: "#/definitions/dtos.ReferrerDistributionDTO"
    type: object
  dtos.ExifInfoDTO:
    properties:
      altitude:
        type: number
      camera_model:
        type: string
      date_time_original:
        type: string
      exposure_time:
        type: string
      f_number:
        type: number
      film_mode:
        type: string
      flash:
        type: integer
      focal_length:
        type: number
      iso_speed_ratings:
        type: integer
      latitude:
        type: number
      lens:
        type: string
      longitude:
        type: number
      make:
        type: string
    type: object
  dtos.ForgotPasswordRequest:
    properties:
      email:
        type: string
    required:
      - email
    type: object
  dtos.GeoDistributionDTO:
    properties:
      country_rank:
        items:
          $ref: "#/definitions/dtos.CountryRanking"
        type: array
      locations:
        items:
          $ref: "#/definitions/dtos.GeoLocationDTO"
        type: array
    type: object
  dtos.GeoLocationDTO:
    properties:
      city:
        type: string
      country:
        type: string
      country_code:
        type: string
      ip_address:
        type: string
      latitude:
        type: number
      longitude:
        type: number
    type: object
  dtos.GlobalStatsDTO:
    properties:
      total_accesses:
        type: integer
      total_storage:
        type: integer
      total_uploads:
        type: integer
    type: object
  dtos.ImageDetailDTO:
    properties:
      album_id:
        type: integer
      created_at:
        type: string
      exif:
        $ref: "#/definitions/dtos.ExifInfoDTO"
      filename:
        type: string
      height:
        type: integer
      id:
        type: integer
      is_public:
        type: boolean
      mime_type:
        type: string
      moderation_status:
        type: integer
      size:
        type: integer
      storage_strategy_id:
        type: integer
      updated_at:
        type: string
      url:
        type: string
      user_id:
        type: integer
      width:
        type: integer
    type: object
  dtos.ImageResponseDTO:
    properties:
      album_id:
        type: integer
      created_at:
        type: string
      filename:
        type: string
      height:
        type: integer
      id:
        type: integer
      is_public:
        type: boolean
      mime_type:
        type: string
      moderation_status:
        type: integer
      size:
        type: integer
      storage_strategy_id:
        type: integer
      updated_at:
        type: string
      url:
        type: string
      user_id:
        type: integer
      width:
        type: integer
    type: object
  dtos.LocalConfigDTO:
    properties:
      base_path:
        type: string
    required:
      - base_path
    type: object
  dtos.LoginRequest:
    properties:
      password:
        type: string
      username_or_email:
        type: string
    required:
      - password
      - username_or_email
    type: object
  dtos.OrphanedFileResultDTO:
    properties:
      cleaned_count:
        type: integer
      dry_run:
        type: boolean
      failed_to_delete:
        items:
          type: string
        type: array
      message:
        type: string
      orphaned_files:
        items:
          type: string
        type: array
      scanned_files:
        type: integer
    type: object
  dtos.PermissionCreateDTO:
    properties:
      description:
        description: 权限的详细描述
        example: 允许创建新用户
        type: string
      group_name:
        description: 权限所属的分组名称，便于管理和展示
        example: User Management
        type: string
      name:
        description: 权限名称，通常是唯一的动作标识符
        example: create_user
        type: string
    required:
      - group_name
      - name
    type: object
  dtos.PermissionResponseDTO:
    properties:
      created_at:
        type: string
      description:
        type: string
      group_name:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  dtos.PermissionUpdateDTO:
    properties:
      description:
        description: 权限的详细描述 (可选)
        example: 更新后的权限描述
        type: string
      group_name:
        description: 权限所属的分组名称 (可选)
        example: Admin Group
        type: string
    type: object
  dtos.PublicSiteDetailsDTO:
    properties:
      app_name:
        type: string
      default_storage_strategy_id:
        description: 新增：默认存储策略ID
        type: integer
      favicon_url:
        type: string
      guest_upload_enabled:
        description: 新增：游客上传是否开启
        type: boolean
      logo_url:
        type: string
      password_min_length:
        description: 新增：密码最小长度
        type: integer
      password_requires_lowercase:
        description: 新增：密码是否需要小写字母
        type: boolean
      password_requires_number:
        description: 新增：密码是否需要数字
        type: boolean
      password_requires_special_char:
        description: 新增：密码是否需要特殊字符
        type: boolean
      password_requires_uppercase:
        description: 新增：密码是否需要大写字母
        type: boolean
      site_announcement:
        type: string
      site_description:
        type: string
      user_registration_enabled:
        description: 新增：用户注册是否开启
        type: boolean
    type: object
  dtos.ReferrerDistributionDTO:
    properties:
      sources:
        items:
          $ref: "#/definitions/dtos.ReferrerSourceStat"
        type: array
      type_percentage:
        items:
          $ref: "#/definitions/dtos.ReferrerTypePercentage"
        type: array
    type: object
  dtos.ReferrerSourceStat:
    properties:
      count:
        type: integer
      source:
        type: string
    type: object
  dtos.ReferrerTypePercentage:
    properties:
      percentage:
        type: number
      type:
        type: string
    type: object
  dtos.RegisterRequest:
    properties:
      email:
        type: string
      password:
        maxLength: 100
        minLength: 6
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
      - email
      - password
      - username
    type: object
  dtos.ResendActivationEmailRequest:
    properties:
      email:
        example: user@example.com
        type: string
    required:
      - email
    type: object
  dtos.ResetPasswordRequest:
    properties:
      code:
        description: 8位重置码
        example: "87654321"
        minLength: 8
        type: string
      confirm_password:
        description: 确认密码 (必须与新密码相同)
        example: newpassword123
        type: string
      email:
        example: user@example.com
        type: string
      password:
        description: 新密码 (最小长度6)
        example: newpassword123
        minLength: 6
        type: string
    required:
      - code
      - confirm_password
      - email
      - password
    type: object
  dtos.RoleCreateDTO:
    properties:
      alias:
        description: 角色别名，可选
        example: 管理员
        type: string
      name:
        description: 角色名称，必须唯一
        example: administrator
        type: string
      storage_strategy_ids:
        description: 关联的存储策略ID列表
        items:
          type: integer
        type: array
    required:
      - name
    type: object
  dtos.RoleResponseDTO:
    properties:
      alias:
        type: string
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      permissions:
        items:
          $ref: "#/definitions/dtos.PermissionResponseDTO"
        type: array
      updated_at:
        type: string
    type: object
  dtos.RoleUpdateDTO:
    properties:
      alias:
        description: 新的角色别名
        example: 超级管理员
        type: string
      name:
        description: 新的角色名称
        example: super_admin
        type: string
      storage_strategy_ids:
        description: 关联的存储策略ID列表 (使用指针以区分空数组和未提供)
        items:
          type: integer
        type: array
    type: object
  dtos.S3ConfigDTO:
    properties:
      access_key_id:
        type: string
      base_url:
        type: string
      bucket:
        type: string
      endpoint:
        type: string
      force_path_style:
        type: boolean
      force_presigned_url:
        type: boolean
      region:
        type: string
      secret_access_key:
        type: string
    required:
      - access_key_id
      - bucket
      - endpoint
      - region
      - secret_access_key
    type: object
  dtos.ShareResponseDTO:
    properties:
      created_at:
        type: string
      created_by_id:
        type: integer
      expire_at:
        type: string
      id:
        type: integer
      resource_id:
        type: integer
      token:
        type: string
      type:
        type: string
      view_count:
        type: integer
    type: object
  dtos.StorageStrategyDTO:
    properties:
      created_at:
        type: string
      id:
        type: integer
      is_enabled:
        type: boolean
      local_config:
        $ref: "#/definitions/dtos.LocalConfigDTO"
      name:
        type: string
      s3_config:
        allOf:
          - $ref: "#/definitions/dtos.S3ConfigDTO"
        description: 根据Type的值，S3Config或LocalConfig必须存在一个
      total_files:
        type: integer
      type:
        enum:
          - s3
          - local
        type: string
      updated_at:
        type: string
      used_space_bytes:
        description: Statistics
        type: integer
    required:
      - is_enabled
      - name
      - type
    type: object
  dtos.SyncPermissionsDTO:
    properties:
      permission_ids:
        description: 权限ID列表，将覆盖角色当前所有权限
        example:
          - 101
          - 102
          - 103
        items:
          type: integer
        type: array
    type: object
  dtos.SystemStatsDTO:
    properties:
      average_file_size:
        type: number
      daily_active_users:
        type: integer
      monthly_active_users:
        type: integer
      total_accesses:
        type: integer
      total_images:
        type: integer
      total_storage:
        type: integer
      total_uploads:
        type: integer
      total_users:
        type: integer
    type: object
  dtos.TestEmailDTO:
    properties:
      test_email:
        description: 接收测试邮件的邮箱地址
        type: string
    required:
      - test_email
    type: object
  dtos.TopImageDTO:
    properties:
      file_name:
        type: string
      image_id:
        type: integer
      size:
        type: integer
      thumbnail_url:
        type: string
      uploaded_at:
        type: string
      uploader:
        type: string
      view_count:
        type: integer
    type: object
  dtos.TopUploaderDTO:
    properties:
      email:
        type: string
      total_image_size:
        description: 总图片大小
        type: integer
      total_image_views:
        description: 总图片浏览量
        type: integer
      upload_count:
        description: 该用户的总上传数
        type: integer
      user_id:
        type: integer
      username:
        type: string
    type: object
  dtos.UpdateBasicSiteSettingsInputDTO:
    properties:
      admin_approval_required:
        type: boolean
      app_name:
        type: string
      default_storage_strategy_id:
        type: integer
      email_notify_enabled:
        description: 邮件通知总开关
        type: boolean
      email_verification_required:
        type: boolean
      favicon_url:
        type: string
      guest_upload_enabled:
        type: boolean
      logo_url:
        type: string
      notify_admin_on_pending_approval:
        type: boolean
      seo_keywords:
        type: string
      site_announcement:
        type: string
      site_description:
        type: string
      user_initial_storage_capacity_mb:
        type: integer
      user_registration_enabled:
        type: boolean
    type: object
  dtos.UpdateEmailSettingsDTO:
    properties:
      email_notify_enabled:
        description: 使用指针以区分未提供和提供false的情况
        type: boolean
      from_email_address:
        type: string
      from_email_name:
        type: string
      smtp_password:
        description: 注意：密码应由后端加密处理
        type: string
      smtp_port:
        description: 使用指针以支持清空或设为0
        type: integer
      smtp_server:
        type: string
      smtp_username:
        type: string
    type: object
  dtos.UpdateImageProcessingSettingDTO:
    properties:
      allowed_image_formats:
        type: string
      auto_compress_enabled:
        type: boolean
      auto_convert_to_webp:
        type: boolean
      batch_upload_limit:
        minimum: 1
        type: integer
      compression_quality:
        maximum: 100
        minimum: 1
        type: integer
      thumbnail_enabled:
        type: boolean
      thumbnail_height:
        minimum: 0
        type: integer
      thumbnail_width:
        minimum: 0
        type: integer
      upload_max_size_mb:
        minimum: 1
        type: integer
      watermark_enabled:
        type: boolean
      watermark_margin_x:
        minimum: 0
        type: integer
      watermark_margin_y:
        minimum: 0
        type: integer
      watermark_opacity:
        maximum: 1
        minimum: 0
        type: number
      watermark_position:
        enum:
          - top-left
          - top-right
          - bottom-left
          - bottom-right
          - center
        type: string
      watermark_scale_ratio:
        maximum: 1
        minimum: 0.0001
        type: number
      watermark_source_file:
        maxLength: 1024
        type: string
      webp_quality:
        maximum: 100
        minimum: 1
        type: integer
    type: object
  dtos.UpdateMeDTO:
    properties:
      email:
        description: 邮箱 (可选, 如果提供则校验格式)
        example: new.email@example.com
        format: email
        type: string
      nickname:
        description: 昵称 (可选)
        example: NewNickname
        type: string
      password:
        description: 新密码 (可选, 如果提供则至少6位)
        example: newpassword123
        minLength: 6
        type: string
    type: object
  dtos.UpdateSecuritySettingsInputDTO:
    properties:
      account_lockout_duration_minutes:
        description: 账户锁定策略(分钟), 0 表示不锁定 (业务逻辑中可能有更严格的校验, e.g., 5-1440)
        minimum: 0
        type: integer
      ip_blacklist:
        description: IP黑名单限制规则, 数组形式接收，存储时转为逗号分隔
        items:
          type: string
        type: array
      ip_whitelist:
        description: IP白名单限制规则, 数组形式接收，存储时转为逗号分隔
        items:
          type: string
        type: array
      login_max_attempts:
        description: 登录失败次数限制, 0 表示不限制 (业务逻辑中可能有更严格的校验, e.g., 3-20)
        minimum: 0
        type: integer
      password_min_length:
        description: 密码最小长度
        maximum: 64
        minimum: 6
        type: integer
      password_requires_lowercase:
        description: 密码是否需要小写字母
        type: boolean
      password_requires_number:
        description: 密码是否需要数字
        type: boolean
      password_requires_special_char:
        description: 密码是否需要特殊字符
        type: boolean
      password_requires_uppercase:
        description: 密码是否需要大写字母
        type: boolean
    type: object
  dtos.UploadFailureDTO:
    properties:
      error:
        type: string
      filename:
        type: string
    type: object
  dtos.UploadResponseDTO:
    properties:
      filename:
        type: string
      id:
        type: integer
      mime_type:
        type: string
      size:
        type: integer
      thumbnail_url:
        type: string
      url:
        type: string
    type: object
  dtos.UserApprovalRequest:
    properties:
      reason:
        description: 拒绝理由，可选
        type: string
    type: object
  dtos.UserResponseDTO:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      last_login_at:
        type: string
      last_login_ip:
        type: string
      nickname:
        type: string
      role:
        allOf:
          - $ref: "#/definitions/dtos.RoleResponseDTO"
        description: 替换 RoleID
      status:
        type: integer
      storage_capacity_mb:
        type: integer
      storage_strategies:
        items:
          $ref: "#/definitions/dtos.UserStorageStrategyDTO"
        type: array
      updated_at:
        type: string
      used_storage_mb:
        type: number
      username:
        type: string
    type: object
  dtos.UserStorageStrategyDTO:
    properties:
      id:
        type: integer
      name:
        type: string
      type:
        type: string
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  models.Album:
    properties:
      coverImage:
        $ref: "#/definitions/models.Image"
      coverImageID:
        type: integer
      createdAt:
        type: string
      deletedAt:
        $ref: "#/definitions/gorm.DeletedAt"
      description:
        type: string
      id:
        type: integer
      isPublic:
        type: boolean
      name:
        type: string
      updatedAt:
        type: string
      user:
        $ref: "#/definitions/models.User"
      userID:
        type: integer
    type: object
  models.AuditLogActionType:
    enum:
      - USER_REGISTER
      - USER_LOGIN
      - USER_LOGOUT
      - USER_UPDATE_PROFILE
      - USER_CHANGE_PASSWORD
      - USER_REQUEST_RESET_PWD
      - USER_RESET_PASSWORD
      - USER_VERIFY_EMAIL
      - USER_REQUEST_ACTIVATION_EMAIL
      - USER_REQUEST_RESET_PWD_EMAIL
      - ADMIN_USER_CREATE
      - ADMIN_USER_UPDATE
      - ADMIN_USER_DELETE
      - ADMIN_USER_STATUS_CHANGE
      - ADMIN_USER_ROLE_CHANGE
      - ADMIN_USER_PASSWORD_RESET
      - ADMIN_BATCH_USER_APPROVE
      - ADMIN_BATCH_USER_REJECT
      - ADMIN_BATCH_USER_BAN
      - ADMIN_BATCH_USER_UNBAN
      - SYSTEM_EMAIL_SEND_SKIPPED
      - SYSTEM_ADMIN_NOTIFICATION_SENT
      - SYSTEM_EMAIL_TEST
    type: string
    x-enum-comments:
      ActionSystemAdminNotificationSent: 系统发送了新用户待审核通知给管理员
      ActionSystemEmailSendSkipped: 邮件发送因配置或开关被跳过
      ActionSystemEmailTest: 系统发送测试邮件
    x-enum-varnames:
      - ActionUserRegister
      - ActionUserLogin
      - ActionUserLogout
      - ActionUserUpdateProfile
      - ActionUserChangePassword
      - ActionUserRequestResetPwd
      - ActionUserResetPassword
      - ActionUserVerifyEmail
      - ActionUserRequestActivationEmail
      - ActionUserRequestResetPwdEmail
      - ActionAdminUserCreate
      - ActionAdminUserUpdate
      - ActionAdminUserDelete
      - ActionAdminUserStatusChange
      - ActionAdminUserRoleChange
      - ActionAdminUserPasswordReset
      - ActionAdminBatchUserApprove
      - ActionAdminBatchUserReject
      - ActionAdminBatchUserBan
      - ActionAdminBatchUserUnban
      - ActionSystemEmailSendSkipped
      - ActionSystemAdminNotificationSent
      - ActionSystemEmailTest
  models.BasicSiteSetting:
    properties:
      adminApprovalRequired:
        type: boolean
      appName:
        type: string
      createdAt:
        type: string
      defaultStorageStrategyID:
        type: integer
      deletedAt:
        $ref: "#/definitions/gorm.DeletedAt"
      emailNotifyEnabled:
        type: boolean
      emailVerificationRequired:
        type: boolean
      faviconURL:
        type: string
      fromEmailAddress:
        type: string
      fromEmailName:
        type: string
      guestUploadEnabled:
        type: boolean
      id:
        type: integer
      logoURL:
        type: string
      notifyAdminOnPendingApproval:
        type: boolean
      seoKeywords:
        type: string
      siteAnnouncement:
        type: string
      siteDescription:
        type: string
      smtppassword:
        type: string
      smtpport:
        type: integer
      smtpserver:
        type: string
      smtpusername:
        type: string
      updatedAt:
        type: string
      userInitialStorageCapacityMB:
        type: integer
      userRegistrationEnabled:
        type: boolean
    type: object
  models.Image:
    properties:
      album:
        $ref: "#/definitions/models.Album"
      albumID:
        type: integer
      createdAt:
        type: string
      deletedAt:
        $ref: "#/definitions/gorm.DeletedAt"
      exif:
        $ref: "#/definitions/models.ImageExif"
      exifID:
        type: integer
      filename:
        type: string
      filepath:
        type: string
      height:
        type: integer
      id:
        type: integer
      isPublic:
        type: boolean
      mimeType:
        type: string
      moderationStatus:
        type: integer
      size:
        type: integer
      storageStrategy:
        $ref: "#/definitions/models.StorageStrategy"
      storageStrategyID:
        type: integer
      thumbnailFilepath:
        type: string
      thumbnailURL:
        type: string
      updatedAt:
        type: string
      url:
        type: string
      user:
        $ref: "#/definitions/models.User"
      userID:
        type: integer
      viewCount:
        type: integer
      width:
        type: integer
    type: object
  models.ImageExif:
    properties:
      altitude:
        type: number
      cameraModel:
        type: string
      createdAt:
        type: string
      dateTimeOriginal:
        description: 拍摄参数
        type: string
      deletedAt:
        $ref: "#/definitions/gorm.DeletedAt"
      exposureBiasValue:
        type: number
      exposureProgram:
        type: integer
      exposureTime:
        type: string
      filmMode:
        description: 富士相机特定字段
        type: string
      flash:
        type: integer
      fnumber:
        type: number
      focalLength:
        type: number
      highlightTone:
        type: string
      id:
        type: integer
      isospeedRatings:
        type: integer
      latitude:
        description: GPS 信息
        type: number
      lens:
        type: string
      longitude:
        type: number
      make:
        description: 相机信息
        type: string
      meteringMode:
        type: integer
      rawExifData:
        description: 原始数据
        type: string
      shadowTone:
        type: string
      updatedAt:
        type: string
      whiteBalance:
        type: integer
    type: object
  models.ImageProcessingSetting:
    properties:
      allowedImageFormats:
        type: string
      autoCompressEnabled:
        type: boolean
      autoConvertToWebP:
        type: boolean
      batchUploadLimit:
        type: integer
      compressionQuality:
        type: integer
      createdAt:
        type: string
      deletedAt:
        $ref: "#/definitions/gorm.DeletedAt"
      id:
        type: integer
      thumbnailEnabled:
        type: boolean
      thumbnailHeight:
        type: integer
      thumbnailWidth:
        type: integer
      updatedAt:
        type: string
      uploadMaxSizeMB:
        type: integer
      watermarkEnabled:
        type: boolean
      watermarkMarginX:
        type: integer
      watermarkMarginY:
        type: integer
      watermarkOpacity:
        type: number
      watermarkPosition:
        type: string
      watermarkScaleRatio:
        type: number
      watermarkSourceFile:
        type: string
      webPQuality:
        type: integer
    type: object
  models.Permission:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: "#/definitions/gorm.DeletedAt"
      description:
        type: string
      groupName:
        type: string
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
    type: object
  models.Role:
    properties:
      alias:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: "#/definitions/gorm.DeletedAt"
      id:
        type: integer
      name:
        type: string
      permissions:
        items:
          $ref: "#/definitions/models.Permission"
        type: array
      storageStrategies:
        items:
          $ref: "#/definitions/models.StorageStrategy"
        type: array
      updatedAt:
        type: string
    type: object
  models.SecuritySetting:
    properties:
      accountLockoutDurationMinutes:
        type: integer
      createdAt:
        type: string
      deletedAt:
        $ref: "#/definitions/gorm.DeletedAt"
      id:
        type: integer
      ipblacklist:
        type: string
      ipwhitelist:
        type: string
      loginMaxAttempts:
        type: integer
      passwordMinLength:
        type: integer
      passwordRequiresLowercase:
        type: boolean
      passwordRequiresNumber:
        type: boolean
      passwordRequiresSpecialChar:
        type: boolean
      passwordRequiresUppercase:
        type: boolean
      updatedAt:
        type: string
    type: object
  models.StorageStrategy:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: "#/definitions/gorm.DeletedAt"
      id:
        type: integer
      isEnabled:
        type: boolean
      localBasePath:
        description: Local Storage Config
        type: string
      name:
        type: string
      s3AccessKeyID:
        type: string
      s3BaseURL:
        type: string
      s3Bucket:
        description: S3 Storage Config
        type: string
      s3Endpoint:
        type: string
      s3ForcePathStyle:
        type: boolean
      s3ForcePresignedURL:
        type: boolean
      s3Region:
        type: string
      s3SecretAccessKey:
        type: string
      totalFiles:
        type: integer
      type:
        description: "'s3' or 'local'"
        type: string
      updatedAt:
        type: string
      usedSpaceBytes:
        description: Statistics
        type: integer
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: "#/definitions/gorm.DeletedAt"
      email:
        type: string
      id:
        type: integer
      lastLoginAt:
        type: string
      lastLoginIP:
        type: string
      minTokenIssueTime:
        type: string
      nickname:
        type: string
      originalRoleID:
        type: integer
      passwordHash:
        type: string
      role:
        $ref: "#/definitions/models.Role"
      roleID:
        type: integer
      status:
        type: integer
      storageCapacityMB:
        type: integer
      suspiciousLoginNotifiedAt:
        type: string
      updatedAt:
        type: string
      usedStorageMB:
        type: number
      username:
        type: string
    type: object
  services.CreateAlbumInput:
    properties:
      cover_image_id:
        type: integer
      description:
        maxLength: 1024
        type: string
      is_public:
        type: boolean
      name:
        maxLength: 255
        minLength: 1
        type: string
    required:
      - name
    type: object
  services.UpdateAlbumInput:
    properties:
      cover_image_id:
        description: 允许设为 null
        type: integer
      description:
        maxLength: 1024
        type: string
      is_public:
        type: boolean
      name:
        maxLength: 255
        minLength: 1
        type: string
    type: object
  utils.Pagination:
    properties:
      page:
        type: integer
      pageSize:
        type: integer
      rows: {}
      total:
        type: integer
    type: object
  utils.PaginationMeta:
    properties:
      page:
        type: integer
      page_size:
        type: integer
      total:
        type: integer
    type: object
  utils.Response:
    properties:
      code:
        description: 业务状态码, 0表示成功, 其他为各类错误
        type: integer
      data:
        description: 成功时返回的业务数据, 失败时可为 null
      meta:
        allOf:
          - $ref: "#/definitions/utils.PaginationMeta"
        description: 分页元数据, 仅在分页查询时出现
      msg:
        description: 简短、清晰的提示信息
        type: string
      request_id:
        description: 用于追踪和日志记录的唯一请求ID
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: 这是 Hue-Go 的 API 文档.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Hue-Go API
  version: "1.0"
paths:
  /admin/audit-logs:
    get:
      consumes:
        - application/json
      description: 管理员查询审计日志，支持筛选、分页和排序
      parameters:
        - default: 1
          description: 页码
          in: query
          minimum: 1
          name: page
          type: integer
        - default: 10
          description: 每页数量
          in: query
          maximum: 100
          minimum: 1
          name: page_size
          type: integer
        - description: 操作员ID
          in: query
          minimum: 1
          name: operator_id
          type: integer
        - description: 操作员名称 (模糊查询)
          in: query
          name: operator_name
          type: string
        - description: 被操作用户ID
          in: query
          minimum: 1
          name: target_user_id
          type: integer
        - description: 被操作用户名 (模糊查询)
          in: query
          name: target_username
          type: string
        - description: 操作类型 (精确匹配)
          enum:
            - USER_REGISTER
            - USER_LOGIN
            - USER_LOGOUT
            - USER_UPDATE_PROFILE
            - USER_CHANGE_PASSWORD
            - USER_REQUEST_RESET_PWD
            - USER_RESET_PASSWORD
            - USER_VERIFY_EMAIL
            - ADMIN_USER_CREATE
            - ADMIN_USER_UPDATE
            - ADMIN_USER_DELETE
            - ADMIN_USER_STATUS_CHANGE
            - ADMIN_USER_ROLE_CHANGE
            - ADMIN_USER_PASSWORD_RESET
            - ADMIN_BATCH_USER_APPROVE
            - ADMIN_BATCH_USER_REJECT
            - ADMIN_BATCH_USER_BAN
            - ADMIN_BATCH_USER_UNBAN
          in: query
          name: action_type
          type: string
        - description: 开始时间 (RFC3339, e.g., 2006-01-02T15:04:05Z07:00)
          format: date-time
          in: query
          name: start_time
          type: string
        - description: 结束时间 (RFC3339, e.g., 2006-01-02T15:04:05Z07:00)
          format: date-time
          in: query
          name: end_time
          type: string
        - default: timestamp
          description: 排序字段
          enum:
            - timestamp
            - operator_name
            - target_username
            - action_type
            - operator_id
            - target_user_id
            - status
          in: query
          name: sort_by
          type: string
        - default: desc
          description: 排序顺序
          enum:
            - asc
            - desc
          in: query
          name: order
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: 成功
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    $ref: "#/definitions/dtos.AuditLogQueryResponse"
                type: object
        "400":
          description: 请求参数错误
          schema:
            $ref: "#/definitions/utils.Response"
        "401":
          description: 未经授权
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 查询审计日志
      tags:
        - Admin - Audit
  /admin/dashboard/access-stats:
    get:
      description: 根据时间周期获取访问量的统计
      parameters:
        - default: 7
          description: 时间范围 (7, 30, 365)
          enum:
            - 7
            - 30
            - 365
          in: query
          name: range
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    items:
                      $ref: "#/definitions/dtos.DailyAccessStatDTO"
                    type: array
                type: object
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 获取访问统计
      tags:
        - Dashboard
  /admin/dashboard/distribution:
    get:
      description: 根据类型（geo 或 referrer）和时间范围获取访问分布数据
      parameters:
        - default: geo
          description: 统计类型 (geo, referrer)
          enum:
            - geo
            - referrer
          in: query
          name: type
          type: string
        - default: 30
          description: 时间范围 (7, 30)
          enum:
            - 7
            - 30
          in: query
          name: range
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    $ref: "#/definitions/dtos.DistributionDTO"
                type: object
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 获取访问分布统计
      tags:
        - Dashboard
  /admin/dashboard/global-stats:
    get:
      description: 获取总上传图片数、总访问量、总存储用量等核心指标
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    $ref: "#/definitions/dtos.GlobalStatsDTO"
                type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 获取全局统计
      tags:
        - Dashboard
  /admin/dashboard/system-stats:
    get:
      description: 获取总用户数,总图片数,存储使用总数,总访问量,总上传数,月活用户数,日活用户数,平均文件大小
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    $ref: "#/definitions/dtos.SystemStatsDTO"
                type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 获取系统级统计
      tags:
        - Dashboard
  /admin/dashboard/top-images:
    get:
      description: 获取按浏览量排序的热门图片列表
      parameters:
        - default: 10
          description: 返回数量
          in: query
          name: limit
          type: integer
        - description: 时间范围 (7, 30)
          enum:
            - 7
            - 30
          in: query
          name: range
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    items:
                      $ref: "#/definitions/dtos.TopImageDTO"
                    type: array
                type: object
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 获取热门图片排行
      tags:
        - Dashboard
  /admin/dashboard/top-users:
    get:
      description: 获取按上传量或总浏览量排序的用户列表
      parameters:
        - default: 10
          description: 返回数量
          in: query
          name: limit
          type: integer
        - description: 时间范围 (7, 30)
          enum:
            - 7
            - 30
          in: query
          name: range
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    items:
                      $ref: "#/definitions/dtos.TopUploaderDTO"
                    type: array
                type: object
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 获取热门用户排行
      tags:
        - Dashboard
  /admin/dashboard/upload-stats:
    get:
      description: 根据时间周期获取上传数量和大小的统计
      parameters:
        - default: 7
          description: 时间范围 (7, 30, 365)
          enum:
            - 7
            - 30
            - 365
          in: query
          name: range
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    items:
                      $ref: "#/definitions/dtos.DailyUploadStatDTO"
                    type: array
                type: object
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 获取上传统计
      tags:
        - Dashboard
  /admin/storage:
    get:
      description: 管理员获取存储策略列表（分页），包含统计信息
      parameters:
        - default: 1
          description: 页码
          in: query
          name: page
          type: integer
        - default: 10
          description: 每页数量
          in: query
          name: page_size
          type: integer
        - description: 存储名称（模糊搜索）
          in: query
          name: name
          type: string
        - description: 存储类型（s3/local）
          in: query
          name: type
          type: string
        - description: 是否启用
          in: query
          name: is_enabled
          type: boolean
      produces:
        - application/json
      responses:
        "200":
          description: 获取成功
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    items:
                      $ref: "#/definitions/dtos.StorageStrategyDTO"
                    type: array
                  meta:
                    $ref: "#/definitions/utils.PaginationMeta"
                type: object
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 获取存储策略列表
      tags:
        - Storage
    post:
      consumes:
        - application/json
      description: 管理员创建新的存储策略
      parameters:
        - description: 存储策略信息。根据type字段，s3_config或local_config必须提供一个
          in: body
          name: strategy
          required: true
          schema:
            $ref: "#/definitions/dtos.StorageStrategyDTO"
      produces:
        - application/json
      responses:
        "201":
          description: 创建成功
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    $ref: "#/definitions/models.StorageStrategy"
                type: object
        "400":
          description: 请求参数错误或配置验证失败
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 创建存储策略
      tags:
        - Storage
  /admin/storage/{id}:
    delete:
      description: 管理员删除指定的存储策略
      parameters:
        - description: 存储策略ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: 删除成功
          schema:
            $ref: "#/definitions/utils.Response"
        "400":
          description: 请求参数错误
          schema:
            $ref: "#/definitions/utils.Response"
        "404":
          description: 资源未找到或无法删除
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 删除存储策略
      tags:
        - Storage
    get:
      description: 管理员根据ID获取单个存储策略，包含统计信息
      parameters:
        - description: 存储策略ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: 获取成功
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    $ref: "#/definitions/dtos.StorageStrategyDTO"
                type: object
        "400":
          description: 请求参数错误
          schema:
            $ref: "#/definitions/utils.Response"
        "404":
          description: 资源未找到
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 获取单个存储策略
      tags:
        - Storage
    put:
      consumes:
        - application/json
      description: 管理员更新指定的存储策略
      parameters:
        - description: 存储策略ID
          in: path
          name: id
          required: true
          type: integer
        - description: 存储策略信息。根据type字段，s3_config或local_config必须提供一个
          in: body
          name: strategy
          required: true
          schema:
            $ref: "#/definitions/dtos.StorageStrategyDTO"
      produces:
        - application/json
      responses:
        "200":
          description: 更新成功
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    $ref: "#/definitions/models.StorageStrategy"
                type: object
        "400":
          description: 请求参数错误或配置验证失败
          schema:
            $ref: "#/definitions/utils.Response"
        "404":
          description: 资源未找到
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 更新存储策略
      tags:
        - Storage
  /admin/storage/{id}/orphaned-files:
    delete:
      description: 扫描并删除在物理上存在但在数据库中没有记录的文件
      parameters:
        - description: 存储策略ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: 清理成功
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    $ref: "#/definitions/dtos.OrphanedFileResultDTO"
                type: object
        "400":
          description: 请求参数错误
          schema:
            $ref: "#/definitions/utils.Response"
        "404":
          description: 资源未找到
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 清理指定存储中的孤立文件
      tags:
        - Storage
    get:
      description: (Dry Run) 扫描存储空间，找出在物理上存在但在数据库中没有记录的文件
      parameters:
        - description: 存储策略ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: 获取成功
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    $ref: "#/definitions/dtos.OrphanedFileResultDTO"
                type: object
        "400":
          description: 请求参数错误
          schema:
            $ref: "#/definitions/utils.Response"
        "404":
          description: 资源未找到
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 预览指定存储中的孤立文件
      tags:
        - Storage
  /admin/storage/{id}/recalculate:
    post:
      description: 管理员手动触发对指定存储策略的用量和文件数进行重新计算
      parameters:
        - description: 存储策略ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: 校准成功，返回更新后的策略信息
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    $ref: "#/definitions/dtos.StorageStrategyDTO"
                type: object
        "400":
          description: 请求参数错误
          schema:
            $ref: "#/definitions/utils.Response"
        "404":
          description: 资源未找到
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 手动校准存储策略统计数据
      tags:
        - Storage
  /admin/storage/status:
    post:
      consumes:
        - application/json
      description: 管理员根据ID批量启用或禁用存储策略
      parameters:
        - description: 需要更新的存储策略ID列表和目标状态
          in: body
          name: status_info
          required: true
          schema:
            $ref: "#/definitions/dtos.BatchUpdateStorageStatusDTO"
      produces:
        - application/json
      responses:
        "200":
          description: 更新成功
          schema:
            $ref: "#/definitions/utils.Response"
        "400":
          description: 请求参数错误
          schema:
            $ref: "#/definitions/utils.Response"
        "404":
          description: 资源未找到
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 批量更新存储策略状态
      tags:
        - Storage
  /admin/storage/test:
    post:
      consumes:
        - application/json
      description: 用户提供S3配置信息，API进行实时的上传/删除测试以验证其可用性
      parameters:
        - description: S3存储配置
          in: body
          name: config
          required: true
          schema:
            $ref: "#/definitions/dtos.S3ConfigDTO"
      produces:
        - application/json
      responses:
        "200":
          description: 连接成功
          schema:
            $ref: "#/definitions/utils.Response"
        "400":
          description: 请求参数错误或连接测试失败
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 测试S3存储连接
      tags:
        - Storage
  /admin/users:
    get:
      consumes:
        - application/json
      description: 管理员获取用户列表的主要接口。支持通过用户名、邮箱、角色ID、状态、创建日期进行筛选，并支持排序。
      parameters:
        - description: 用户名 (模糊匹配)
          in: query
          name: username
          type: string
        - description: 邮箱 (模糊匹配)
          in: query
          name: email
          type: string
        - description: 角色ID
          in: query
          name: role_id
          type: integer
        - description:
            "用户状态 (0: Normal, 1: PendingApproval, 2: Banned, 3: Deleted,
            4: ApprovalRejected)"
          in: query
          name: status
          type: integer
        - description: 创建时间范围开始 (YYYY-MM-DD)
          format: date
          in: query
          name: created_at_start
          type: string
        - description: 创建时间范围结束 (YYYY-MM-DD)
          format: date
          in: query
          name: created_at_end
          type: string
        - default: 1
          description: 页码
          in: query
          name: page
          type: integer
        - default: 10
          description: 每页数量
          in: query
          name: page_size
          type: integer
        - default: id
          description:
            排序字段 (id, username, email, role_id, status, created_at, updated_at,
            last_login_at)
          in: query
          name: sort_by
          type: string
        - default: asc
          description: 排序顺序 (asc, desc)
          in: query
          name: sort_order
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: 成功响应
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    items:
                      $ref: "#/definitions/dtos.AdminUserResponseDTO"
                    type: array
                type: object
        "400":
          description: 请求参数错误
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 管理员获取用户列表（支持筛选和排序）
      tags:
        - Admin User Management
    post:
      consumes:
        - application/json
      description: 管理员创建一个新用户账户
      parameters:
        - description: 用户信息
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/dtos.AdminUserCreateRequest"
      produces:
        - application/json
      responses:
        "201":
          description: 用户创建成功
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    $ref: "#/definitions/models.User"
                type: object
        "400":
          description: 请求参数错误或用户已存在
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 管理员创建用户
      tags:
        - Admin User Management
  /admin/users/{id}:
    delete:
      consumes:
        - application/json
      description: 管理员物理删除指定ID的用户的主要接口。
      parameters:
        - description: 用户ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: 用户物理删除成功
          schema:
            $ref: "#/definitions/utils.Response"
        "400":
          description: 无效的用户ID
          schema:
            $ref: "#/definitions/utils.Response"
        "404":
          description: 用户未找到
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 管理员物理删除用户
      tags:
        - Admin User Management
    put:
      consumes:
        - application/json
      description: 管理员更新指定用户的通用信息，包括用户名、邮箱、昵称、角色、状态和存储容量。
      parameters:
        - description: 用户ID
          in: path
          name: id
          required: true
          type: integer
        - description: 要更新的用户信息
          in: body
          name: user
          required: true
          schema:
            $ref: "#/definitions/dtos.AdminUserUpdateRequest"
      produces:
        - application/json
      responses:
        "200":
          description: 成功响应
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    $ref: "#/definitions/models.User"
                type: object
        "400":
          description: 请求参数错误或无效的用户ID
          schema:
            $ref: "#/definitions/utils.Response"
        "404":
          description: 用户未找到
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 管理员更新任意用户信息
      tags:
        - Admin User Management
  /admin/users/{id}/approve:
    post:
      consumes:
        - application/json
      description: 管理员批准指定ID的用户
      parameters:
        - description: 用户ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: 成功响应
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    $ref: "#/definitions/models.User"
                type: object
        "400":
          description: 请求参数错误或用户状态不合法
          schema:
            $ref: "#/definitions/utils.Response"
        "404":
          description: 用户未找到
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 批准用户
      tags:
        - Admin User Management
  /admin/users/{id}/ban:
    post:
      consumes:
        - application/json
      description: 管理员封禁指定ID的用户
      parameters:
        - description: 用户ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: 用户封禁成功
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    $ref: "#/definitions/models.User"
                type: object
        "400":
          description: 无效的用户ID或用户状态不合法
          schema:
            $ref: "#/definitions/utils.Response"
        "404":
          description: 用户未找到
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 封禁用户
      tags:
        - Admin User Management
  /admin/users/{id}/reject:
    post:
      consumes:
        - application/json
      description: 管理员拒绝指定ID的用户
      parameters:
        - description: 用户ID
          in: path
          name: id
          required: true
          type: integer
        - description: 拒绝理由
          in: body
          name: body
          schema:
            $ref: "#/definitions/dtos.UserApprovalRequest"
      produces:
        - application/json
      responses:
        "200":
          description: 成功响应
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    $ref: "#/definitions/models.User"
                type: object
        "400":
          description: 请求参数错误或用户状态不合法
          schema:
            $ref: "#/definitions/utils.Response"
        "404":
          description: 用户未找到
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 拒绝用户
      tags:
        - Admin User Management
  /admin/users/{id}/reset-password:
    post:
      consumes:
        - application/json
      description: 管理员为指定用户重置密码。新密码将通过邮件发送给用户。
      parameters:
        - description: 用户ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: 密码重置成功
          schema:
            $ref: "#/definitions/utils.Response"
        "400":
          description: 无效的用户ID
          schema:
            $ref: "#/definitions/utils.Response"
        "404":
          description: 用户未找到
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 管理员重置用户密码
      tags:
        - Admin User Management
  /admin/users/{id}/unban:
    post:
      consumes:
        - application/json
      description: 管理员解封指定ID的用户
      parameters:
        - description: 用户ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: 用户解封成功
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    $ref: "#/definitions/models.User"
                type: object
        "400":
          description: 无效的用户ID或用户状态不合法
          schema:
            $ref: "#/definitions/utils.Response"
        "404":
          description: 用户未找到
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 解封用户
      tags:
        - Admin User Management
  /admin/users/{user_id}/images-overview:
    get:
      description: 管理员查看指定用户的相册列表和无相册图片概览。支持分页功能。仅限admin角色访问。
      parameters:
        - description: 用户ID
          in: path
          name: user_id
          required: true
          type: integer
        - description: 页码 (默认 1)
          in: query
          name: page
          type: integer
        - description: 每页图片数量 (默认 20, 最大 100)
          in: query
          name: page_size
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: 用户图片概览及分页信息
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    $ref: "#/definitions/dtos.AdminUserImagesOverviewResponseDTO"
                  meta:
                    $ref: "#/definitions/utils.PaginationMeta"
                type: object
        "401":
          description: 未授权
          schema:
            $ref: "#/definitions/utils.Response"
        "403":
          description: 权限不足
          schema:
            $ref: "#/definitions/utils.Response"
        "404":
          description: 用户不存在
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 管理员查看指定用户的图片概览
      tags:
        - Admin
  /admin/users/batch-approve:
    post:
      consumes:
        - application/json
      description: 管理员批量批准指定ID列表的用户
      parameters:
        - description: 用户ID列表
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/dtos.BatchUserIDsRequest"
      produces:
        - application/json
      responses:
        "200":
          description: 成功响应，包含成功数量和失败详情
          schema:
            $ref: "#/definitions/utils.Response"
        "400":
          description: 请求参数错误
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 批量批准用户
      tags:
        - Admin User Management
  /admin/users/batch-ban:
    post:
      consumes:
        - application/json
      description: 管理员批量封禁指定ID列表的用户
      parameters:
        - description: 用户ID列表
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/dtos.BatchUserIDsRequest"
      produces:
        - application/json
      responses:
        "200":
          description: 成功响应，包含成功数量和失败详情
          schema:
            $ref: "#/definitions/utils.Response"
        "400":
          description: 请求参数错误
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 批量封禁用户
      tags:
        - Admin User Management
  /admin/users/batch-reject:
    post:
      consumes:
        - application/json
      description: 管理员批量拒绝指定ID列表的用户
      parameters:
        - description: 用户ID列表和拒绝理由
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/dtos.BatchUserRejectRequest"
      produces:
        - application/json
      responses:
        "200":
          description: 成功响应，包含成功数量和失败详情
          schema:
            $ref: "#/definitions/utils.Response"
        "400":
          description: 请求参数错误
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 批量拒绝用户
      tags:
        - Admin User Management
  /admin/users/batch-unban:
    post:
      consumes:
        - application/json
      description: 管理员批量解封指定ID列表的用户
      parameters:
        - description: 用户ID列表
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/dtos.BatchUserIDsRequest"
      produces:
        - application/json
      responses:
        "200":
          description: 成功响应，包含成功数量和失败详情
          schema:
            $ref: "#/definitions/utils.Response"
        "400":
          description: 请求参数错误
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 批量解封用户
      tags:
        - Admin User Management
  /admin/users/pending:
    get:
      consumes:
        - application/json
      description: 管理员获取所有状态为“待审核”的用户列表，支持分页
      parameters:
        - default: 1
          description: 页码
          in: query
          name: page
          type: integer
        - default: 10
          description: 每页数量
          in: query
          name: page_size
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: 成功响应
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    items:
                      $ref: "#/definitions/models.User"
                    type: array
                type: object
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 获取待审核用户列表
      tags:
        - Admin User Management
  /admin/users/with-images:
    get:
      description: 管理员查看系统中有图片的用户列表，显示用户基本信息和图片统计。支持分页功能。仅限admin角色访问。
      parameters:
        - description: 页码 (默认 1)
          in: query
          name: page
          type: integer
        - description: 每页用户数量 (默认 10, 最大 50)
          in: query
          name: page_size
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: 有图片的用户列表及分页信息
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    $ref: "#/definitions/dtos.AdminUsersWithImagesResponseDTO"
                  meta:
                    $ref: "#/definitions/utils.PaginationMeta"
                type: object
        "401":
          description: 未授权
          schema:
            $ref: "#/definitions/utils.Response"
        "403":
          description: 权限不足
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 管理员查看有图片的用户列表
      tags:
        - Admin
  /albums:
    get:
      description: 获取当前登录用户的所有相册
      produces:
        - application/json
      responses:
        "200":
          description: 获取成功
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    items:
                      $ref: "#/definitions/dtos.AlbumResponseDTO"
                    type: array
                type: object
        "401":
          description: 认证失败
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 获取当前用户的相册列表
      tags:
        - Albums
    post:
      consumes:
        - application/json
      description: 用户创建一个新的相册
      parameters:
        - description: 相册信息
          in: body
          name: album_data
          required: true
          schema:
            $ref: "#/definitions/services.CreateAlbumInput"
      produces:
        - application/json
      responses:
        "201":
          description: 相册创建成功
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    $ref: "#/definitions/dtos.AlbumResponseDTO"
                type: object
        "400":
          description: 请求参数错误
          schema:
            $ref: "#/definitions/utils.Response"
        "401":
          description: 认证失败
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 创建相册
      tags:
        - Albums
  /albums/{id}:
    delete:
      description: 删除指定ID的相册
      parameters:
        - description: 相册ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: 删除成功
          schema:
            $ref: "#/definitions/utils.Response"
        "400":
          description: 无效的相册ID
          schema:
            $ref: "#/definitions/utils.Response"
        "401":
          description: 认证失败
          schema:
            $ref: "#/definitions/utils.Response"
        "403":
          description: 无权删除
          schema:
            $ref: "#/definitions/utils.Response"
        "404":
          description: 相册未找到
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 删除相册
      tags:
        - Albums
    get:
      description: 根据相册ID获取相册的详细信息
      parameters:
        - description: 相册ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: 获取成功
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    $ref: "#/definitions/dtos.AlbumResponseDTO"
                type: object
        "400":
          description: 无效的相册ID
          schema:
            $ref: "#/definitions/utils.Response"
        "401":
          description: 认证失败
          schema:
            $ref: "#/definitions/utils.Response"
        "403":
          description: 无权访问
          schema:
            $ref: "#/definitions/utils.Response"
        "404":
          description: 相册未找到
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 获取单个相册信息
      tags:
        - Albums
    put:
      consumes:
        - application/json
      description: 更新指定ID的相册信息
      parameters:
        - description: 相册ID
          in: path
          name: id
          required: true
          type: integer
        - description: 要更新的相册信息
          in: body
          name: album_data
          required: true
          schema:
            $ref: "#/definitions/services.UpdateAlbumInput"
      produces:
        - application/json
      responses:
        "200":
          description: 更新成功
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    $ref: "#/definitions/dtos.AlbumResponseDTO"
                type: object
        "400":
          description: 请求参数错误或无效的相册ID
          schema:
            $ref: "#/definitions/utils.Response"
        "401":
          description: 认证失败
          schema:
            $ref: "#/definitions/utils.Response"
        "403":
          description: 无权修改
          schema:
            $ref: "#/definitions/utils.Response"
        "404":
          description: 相册未找到
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 更新相册信息
      tags:
        - Albums
  /albums/{id}/images:
    get:
      description: 获取指定相册下的所有图片，支持分页
      parameters:
        - description: 相册ID
          in: path
          name: id
          required: true
          type: integer
        - default: 1
          description: 页码
          in: query
          name: page
          type: integer
        - default: 20
          description: 每页数量
          in: query
          name: page_size
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: 获取成功
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    items:
                      $ref: "#/definitions/dtos.ImageResponseDTO"
                    type: array
                  meta:
                    $ref: "#/definitions/utils.PaginationMeta"
                type: object
        "400":
          description: 无效的相册ID或分页参数
          schema:
            $ref: "#/definitions/utils.Response"
        "401":
          description: 认证失败
          schema:
            $ref: "#/definitions/utils.Response"
        "403":
          description: 无权访问
          schema:
            $ref: "#/definitions/utils.Response"
        "404":
          description: 相册未找到
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 获取相册下的图片列表
      tags:
        - Albums
  /auth/activate:
    post:
      consumes:
        - application/json
      description: 用户使用邮箱和激活码激活账户
      parameters:
        - description: 激活信息
          in: body
          name: request
          required: true
          schema:
            $ref: "#/definitions/dtos.AccountActivationRequest"
      produces:
        - application/json
      responses:
        "200":
          description: 账户激活成功
          schema:
            $ref: "#/definitions/utils.Response"
        "400":
          description: 请求参数错误、验证码无效或已过期
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      summary: 账户激活
      tags:
        - Auth
  /auth/forgot-password:
    post:
      consumes:
        - application/json
      description: 用户提交邮箱以请求密码重置邮件
      parameters:
        - description: 忘记密码请求
          in: body
          name: request
          required: true
          schema:
            $ref: "#/definitions/dtos.ForgotPasswordRequest"
      produces:
        - application/json
      responses:
        "200":
          description: 密码重置邮件已发送
          schema:
            $ref: "#/definitions/utils.Response"
        "400":
          description: 请求参数错误
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      summary: 请求密码重置
      tags:
        - Auth
  /auth/login:
    post:
      consumes:
        - application/json
      description: 用户使用用户名/邮箱和密码进行登录
      parameters:
        - description: 登录信息
          in: body
          name: request
          required: true
          schema:
            $ref: "#/definitions/dtos.LoginRequest"
      produces:
        - application/json
      responses:
        "200":
          description: 登录成功，返回用户信息和JWT
          schema:
            $ref: "#/definitions/utils.Response"
        "400":
          description: 请求参数错误
          schema:
            $ref: "#/definitions/utils.Response"
        "401":
          description: 认证失败
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      summary: 用户登录
      tags:
        - Auth
  /auth/logout:
    post:
      description: 用户登出，使其 JWT 失效
      produces:
        - application/json
      responses:
        "200":
          description: 登出成功
          schema:
            $ref: "#/definitions/utils.Response"
        "400":
          description: 请求头中缺少 Authorization 或 Token 格式错误
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 用户登出
      tags:
        - Auth
  /auth/register:
    post:
      consumes:
        - application/json
      description: 用户使用用户名、邮箱和密码进行注册
      parameters:
        - description: 注册信息
          in: body
          name: request
          required: true
          schema:
            $ref: "#/definitions/dtos.RegisterRequest"
      produces:
        - application/json
      responses:
        "200":
          description: 注册请求已提交，请检查邮箱以激活账户
          schema:
            $ref: "#/definitions/utils.Response"
        "400":
          description: 请求参数错误或用户已存在
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      summary: 用户注册
      tags:
        - Auth
  /auth/resend-activation-email:
    post:
      consumes:
        - application/json
      description: 为待激活的用户重新发送激活邮件
      parameters:
        - description: 重发激活邮件请求
          in: body
          name: request
          required: true
          schema:
            $ref: "#/definitions/dtos.ResendActivationEmailRequest"
      produces:
        - application/json
      responses:
        "200":
          description: 激活邮件已发送
          schema:
            $ref: "#/definitions/utils.Response"
        "400":
          description: 请求参数错误或账户状态不适用
          schema:
            $ref: "#/definitions/utils.Response"
        "429":
          description: 操作过于频繁
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      summary: 重发激活邮件
      tags:
        - Auth
  /auth/reset-password:
    post:
      consumes:
        - application/json
      description: 用户使用邮箱、新密码和验证码重置密码
      parameters:
        - description: 重置密码请求
          in: body
          name: request
          required: true
          schema:
            $ref: "#/definitions/dtos.ResetPasswordRequest"
      produces:
        - application/json
      responses:
        "200":
          description: 密码重置成功
          schema:
            $ref: "#/definitions/utils.Response"
        "400":
          description: 请求参数错误、验证码无效或已过期
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      summary: 执行密码重置
      tags:
        - Auth
  /images:
    delete:
      consumes:
        - application/json
      description: 根据一组图片ID批量删除图片。需要图片所有者或管理员权限。
      parameters:
        - description: 要删除的图片ID列表
          in: body
          name: image_ids
          required: true
          schema:
            $ref: "#/definitions/dtos.BatchDeleteImagesDTO"
      produces:
        - application/json
      responses:
        "200":
          description: 删除成功
          schema:
            $ref: "#/definitions/utils.Response"
        "400":
          description: 无效的请求体
          schema:
            $ref: "#/definitions/utils.Response"
        "401":
          description: 未授权
          schema:
            $ref: "#/definitions/utils.Response"
        "403":
          description: 无权限删除
          schema:
            $ref: "#/definitions/utils.Response"
        "404":
          description: 部分或全部图片未找到
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 批量删除图片
      tags:
        - Images
    get:
      description: 列出当前用户的图片，支持分页和按相册筛选。
      parameters:
        - description: 相册ID (用于筛选)
          in: query
          name: album_id
          type: string
        - description: 页码 (默认 1)
          in: query
          name: page
          type: integer
        - description: 每页数量 (默认 20)
          in: query
          name: page_size
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: 图片列表及分页信息
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    items:
                      $ref: "#/definitions/dtos.ImageResponseDTO"
                    type: array
                  meta:
                    $ref: "#/definitions/utils.PaginationMeta"
                type: object
        "401":
          description: 未授权
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 列出图片
      tags:
        - Images
    post:
      consumes:
        - multipart/form-data
      description: 上传一个或多个图片文件。用户必须已登录。支持批量上传，部分文件失败不影响其他文件处理。
      parameters:
        - description: 要上传的图片文件 (字段名为 'files')
          in: formData
          name: files
          required: true
          type: file
        - description: 图片关联的相册ID (可选)
          in: formData
          name: album_id
          type: string
        - description: 要使用的存储策略ID (可选, 否则使用默认策略)
          in: formData
          name: storage_strategy_id
          type: integer
      produces:
        - application/json
      responses:
        "201":
          description: 全部文件上传成功
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    $ref: "#/definitions/dtos.BatchUploadResponseDTO"
                type: object
        "207":
          description: 部分文件上传成功
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    $ref: "#/definitions/dtos.BatchUploadResponseDTO"
                type: object
        "400":
          description: 错误请求 (例如：未上传文件、文件数量超限、全部文件上传失败)
          schema:
            $ref: "#/definitions/utils.Response"
        "401":
          description: 未授权 (用户未登录或Token无效)
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 上传图片
      tags:
        - Images
  /images/{id}:
    get:
      description: 根据图片ID获取其元数据信息。
      parameters:
        - description: 图片ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: 图片元数据
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    $ref: "#/definitions/dtos.ImageResponseDTO"
                type: object
        "401":
          description: 未授权
          schema:
            $ref: "#/definitions/utils.Response"
        "404":
          description: 图片未找到
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 获取图片信息
      tags:
        - Images
  /images/{id}/detail:
    get:
      description: 根据图片ID获取其完整的元数据，包括 EXIF 信息。
      parameters:
        - description: 图片ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: 图片详细元数据
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    $ref: "#/definitions/dtos.ImageDetailDTO"
                type: object
        "401":
          description: 未授权
          schema:
            $ref: "#/definitions/utils.Response"
        "404":
          description: 图片未找到
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 获取图片详细信息
      tags:
        - Images
  /images/{id}/view:
    get:
      description: 根据图片ID获取图片文件。对于私有图片，需要所有者权限。
      parameters:
        - description: 图片ID
          in: path
          name: id
          required: true
          type: string
        - description: 是否获取缩略图 (true/false)
          in: query
          name: thumb
          type: boolean
      produces:
        - image/png
        - image/jpeg
        - image/gif
        - image/webp
      responses:
        "200":
          description: 图片文件
          schema:
            type: file
        "302":
          description: 重定向到S3预签名URL
        "400":
          description: 无效的ID
          schema:
            $ref: "#/definitions/utils.Response"
        "403":
          description: 无权访问
          schema:
            $ref: "#/definitions/utils.Response"
        "404":
          description: 图片或缩略图未找到
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      summary: 获取图片文件
      tags:
        - Images
  /images/batch/move-to-album:
    put:
      consumes:
        - application/json
      description: 批量移动一个或多个图片到指定的相册。如果 album_id 为 null，则将图片移出相册。
      parameters:
        - description: 要移动的图片ID列表和目标相册ID
          in: body
          name: move_request
          required: true
          schema:
            $ref: "#/definitions/dtos.BatchMoveImagesToAlbumDTO"
      produces:
        - application/json
      responses:
        "200":
          description: 移动成功
          schema:
            $ref: "#/definitions/utils.Response"
        "400":
          description: 无效的请求体
          schema:
            $ref: "#/definitions/utils.Response"
        "401":
          description: 未授权
          schema:
            $ref: "#/definitions/utils.Response"
        "403":
          description: 无权限移动
          schema:
            $ref: "#/definitions/utils.Response"
        "404":
          description: 部分图片或目标相册未找到
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 批量移动图片到相册
      tags:
        - Images
  /images/batch/public:
    put:
      consumes:
        - application/json
      description: 批量修改指定ID的图片的公开或私有属性。需要图片所有者权限。
      parameters:
        - description: 要更新的图片ID列表和公开状态
          in: body
          name: public_status
          required: true
          schema:
            $ref: "#/definitions/dtos.BatchUpdateImagePublicDTO"
      produces:
        - application/json
      responses:
        "200":
          description: 更新成功
          schema:
            $ref: "#/definitions/utils.Response"
        "400":
          description: 无效的请求体
          schema:
            $ref: "#/definitions/utils.Response"
        "401":
          description: 未授权
          schema:
            $ref: "#/definitions/utils.Response"
        "403":
          description: 无权限修改
          schema:
            $ref: "#/definitions/utils.Response"
        "404":
          description: 部分或全部图片未找到
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 批量修改图片公开属性
      tags:
        - Images
  /me:
    get:
      description: 获取当前登录用户的详细信息
      produces:
        - application/json
      responses:
        "200":
          description: 成功响应
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    $ref: "#/definitions/dtos.UserResponseDTO"
                type: object
        "401":
          description: 用户未认证
          schema:
            $ref: "#/definitions/utils.Response"
        "404":
          description: 用户不存在
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 获取当前用户信息
      tags:
        - Users
    put:
      consumes:
        - application/json
      description: 更新当前登录用户的昵称、邮箱或密码
      parameters:
        - description: 更新信息
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/dtos.UpdateMeDTO"
      produces:
        - application/json
      responses:
        "200":
          description: 成功响应，返回更新后的用户信息
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    $ref: "#/definitions/dtos.UserResponseDTO"
                type: object
        "400":
          description: 请求参数错误
          schema:
            $ref: "#/definitions/utils.Response"
        "401":
          description: 用户未认证
          schema:
            $ref: "#/definitions/utils.Response"
        "409":
          description: 冲突错误 (例如邮箱已存在)
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 更新当前用户信息
      tags:
        - Users
  /permissions:
    get:
      consumes:
        - application/json
      description: 获取所有权限，支持分页和按组名过滤
      parameters:
        - default: 1
          description: 页码
          in: query
          name: page
          type: integer
        - default: 10
          description: 每页数量
          in: query
          name: page_size
          type: integer
        - description: 权限分组名称
          in: query
          name: group_name
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: 成功
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 获取权限列表
      tags:
        - Permissions
    post:
      consumes:
        - application/json
      description: 创建一个新的权限定义
      parameters:
        - description: 权限创建信息
          in: body
          name: permission_input
          required: true
          schema:
            $ref: "#/definitions/dtos.PermissionCreateDTO"
      produces:
        - application/json
      responses:
        "201":
          description: 创建成功
          schema:
            $ref: "#/definitions/utils.Response"
        "400":
          description: 请求参数错误
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 创建新权限
      tags:
        - Permissions
  /permissions/{id}:
    delete:
      consumes:
        - application/json
      description: 根据ID删除权限及其所有关联
      parameters:
        - description: 权限ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: 删除成功
          schema:
            $ref: "#/definitions/utils.Response"
        "400":
          description: 无效的ID格式
          schema:
            $ref: "#/definitions/utils.Response"
        "404":
          description: 权限未找到
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 删除权限
      tags:
        - Permissions
    get:
      consumes:
        - application/json
      description: 根据ID获取权限的详细信息
      parameters:
        - description: 权限ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: 成功
          schema:
            $ref: "#/definitions/utils.Response"
        "400":
          description: 无效的ID格式
          schema:
            $ref: "#/definitions/utils.Response"
        "404":
          description: 权限未找到
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 获取单个权限详情
      tags:
        - Permissions
    put:
      consumes:
        - application/json
      description: 更新指定ID的权限信息 (注意：通常不建议修改权限的 Name)
      parameters:
        - description: 权限ID
          in: path
          name: id
          required: true
          type: integer
        - description: 权限更新信息
          in: body
          name: permission_update
          required: true
          schema:
            $ref: "#/definitions/dtos.PermissionUpdateDTO"
      produces:
        - application/json
      responses:
        "200":
          description: 更新成功
          schema:
            $ref: "#/definitions/utils.Response"
        "400":
          description: 请求参数错误或无效的ID
          schema:
            $ref: "#/definitions/utils.Response"
        "404":
          description: 权限未找到
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 更新权限信息
      tags:
        - Permissions
  /public/settings/site-details:
    get:
      description: 获取网站对所有访客公开的基础详情信息 (例如：应用名称, 网站描述, Favicon, Logo, 公告, 用户注册开关, 密码策略等)
      produces:
        - application/json
      responses:
        "200":
          description: 成功获取公开的网站详情 (包括应用名称, 描述, Logo, 公告, 注册开关, 密码策略等)
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    $ref: "#/definitions/dtos.PublicSiteDetailsDTO"
                type: object
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      summary: 获取公开的网站基础详情
      tags:
        - Settings
        - Public
  /recycle-bin:
    get:
      consumes:
        - application/json
      description: 获取当前用户回收站中的项目列表，支持分页
      parameters:
        - description: Page number
          in: query
          name: page
          type: integer
        - description: Page size
          in: query
          name: pageSize
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: 成功
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    allOf:
                      - $ref: "#/definitions/utils.Pagination"
                      - properties:
                          rows:
                            items:
                              $ref: "#/definitions/models.Image"
                            type: array
                        type: object
                type: object
        "400":
          description: 请求错误
          schema:
            $ref: "#/definitions/utils.Response"
        "401":
          description: 未授权
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 列出回收站项目
      tags:
        - Recycle Bin
  /recycle-bin/purge/{id}:
    delete:
      consumes:
        - application/json
      description: 从回收站中永久删除指定的图片
      parameters:
        - description: 图片ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: 成功
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    properties:
                      message:
                        type: string
                    type: object
                type: object
        "400":
          description: 请求错误
          schema:
            $ref: "#/definitions/utils.Response"
        "401":
          description: 未授权
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 永久删除图片
      tags:
        - Recycle Bin
  /recycle-bin/restore/{id}:
    post:
      consumes:
        - application/json
      description: 从回收站中恢复指定的图片
      parameters:
        - description: 图片ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: 成功
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    properties:
                      message:
                        type: string
                    type: object
                type: object
        "400":
          description: 请求错误
          schema:
            $ref: "#/definitions/utils.Response"
        "401":
          description: 未授权
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 恢复图片
      tags:
        - Recycle Bin
  /roles:
    get:
      consumes:
        - application/json
      description: 获取所有角色，支持分页
      parameters:
        - default: 1
          description: 页码
          in: query
          name: page
          type: integer
        - default: 10
          description: 每页数量
          in: query
          name: page_size
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: 成功
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    items:
                      $ref: "#/definitions/dtos.RoleResponseDTO"
                    type: array
                  meta:
                    $ref: "#/definitions/utils.PaginationMeta"
                type: object
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 获取角色列表
      tags:
        - Roles
    post:
      consumes:
        - application/json
      description: 创建一个新角色，可以同时关联存储策略。
      parameters:
        - description: 角色创建信息，包括名称、别名和可选的存储策略ID列表 (storage_strategy_ids)
          in: body
          name: role_input
          required: true
          schema:
            $ref: "#/definitions/dtos.RoleCreateDTO"
      produces:
        - application/json
      responses:
        "201":
          description: 创建成功
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    $ref: "#/definitions/dtos.RoleResponseDTO"
                type: object
        "400":
          description: 请求参数错误
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 创建新角色
      tags:
        - Roles
  /roles/{id}:
    delete:
      consumes:
        - application/json
      description: 根据ID删除角色及其所有关联的权限和用户分配
      parameters:
        - description: 角色ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: 删除成功
          schema:
            $ref: "#/definitions/utils.Response"
        "400":
          description: 无效的ID格式
          schema:
            $ref: "#/definitions/utils.Response"
        "404":
          description: 角色未找到
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 删除角色
      tags:
        - Roles
    get:
      consumes:
        - application/json
      description: 根据ID获取角色的详细信息，包括其权限
      parameters:
        - description: 角色ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: 成功
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    $ref: "#/definitions/dtos.RoleResponseDTO"
                type: object
        "400":
          description: 无效的ID格式
          schema:
            $ref: "#/definitions/utils.Response"
        "404":
          description: 角色未找到
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 获取单个角色详情
      tags:
        - Roles
    put:
      consumes:
        - application/json
      description: 更新指定ID的角色信息，包括名称、别名和关联的存储策略。
      parameters:
        - description: 角色ID
          in: path
          name: id
          required: true
          type: integer
        - description: 角色更新信息。所有字段都是可选的，包括 storage_strategy_ids。
          in: body
          name: role_update
          required: true
          schema:
            $ref: "#/definitions/dtos.RoleUpdateDTO"
      produces:
        - application/json
      responses:
        "200":
          description: 更新成功
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    $ref: "#/definitions/dtos.RoleResponseDTO"
                type: object
        "400":
          description: 请求参数错误或无效的ID
          schema:
            $ref: "#/definitions/utils.Response"
        "404":
          description: 角色未找到
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 更新角色信息
      tags:
        - Roles
  /roles/{id}/permissions:
    get:
      consumes:
        - application/json
      description: 获取指定角色当前拥有的所有权限
      parameters:
        - description: 角色ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: 成功
          schema:
            $ref: "#/definitions/utils.Response"
        "400":
          description: 无效ID
          schema:
            $ref: "#/definitions/utils.Response"
        "404":
          description: 角色未找到
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 获取角色拥有的权限列表
      tags:
        - Permissions
    put:
      consumes:
        - application/json
      description: 覆盖指定角色当前的所有权限为请求中提供的权限列表
      parameters:
        - description: 角色ID
          in: path
          name: id
          required: true
          type: integer
        - description: 权限ID列表
          in: body
          name: permission_sync_input
          required: true
          schema:
            $ref: "#/definitions/dtos.SyncPermissionsDTO"
      produces:
        - application/json
      responses:
        "200":
          description: 同步成功
          schema:
            $ref: "#/definitions/utils.Response"
        "400":
          description: 请求参数错误或无效ID
          schema:
            $ref: "#/definitions/utils.Response"
        "404":
          description: 角色未找到
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 同步角色的权限列表
      tags:
        - Permissions
  /roles/{id}/permissions/{permission_id}:
    delete:
      consumes:
        - application/json
      description: 从指定的角色移除指定的权限
      parameters:
        - description: 角色ID
          in: path
          name: id
          required: true
          type: integer
        - description: 权限ID
          in: path
          name: permission_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: 移除成功
          schema:
            $ref: "#/definitions/utils.Response"
        "400":
          description: 无效ID
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 从角色移除权限
      tags:
        - Permissions
  /roles/{role_id}/permissions:
    post:
      consumes:
        - application/json
      description: 将指定的权限分配给指定的角色
      parameters:
        - description: 角色ID
          in: path
          name: role_id
          required: true
          type: integer
        - description: 权限分配信息
          in: body
          name: permission_assign_input
          required: true
          schema:
            $ref: "#/definitions/dtos.AssignPermissionDTO"
      produces:
        - application/json
      responses:
        "200":
          description: 分配成功
          schema:
            $ref: "#/definitions/utils.Response"
        "400":
          description: 请求参数错误或无效ID
          schema:
            $ref: "#/definitions/utils.Response"
        "404":
          description: 角色或权限未找到
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 为角色添加权限
      tags:
        - Permissions
  /settings/basic:
    get:
      description:
        获取网站的详细基础配置信息 (仅供管理员访问)，包括默认存储策略ID。不包含SMTP服务器的具体连接信息，这些信息请通过 /settings/email
        接口获取。
      produces:
        - application/json
      responses:
        "200":
          description: 成功获取网站详细基础配置
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    $ref: "#/definitions/dtos.AdminBasicSiteSettingsDTO"
                type: object
        "401":
          description: 用户未认证
          schema:
            $ref: "#/definitions/utils.Response"
        "403":
          description: 用户无权限访问
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 获取网站基础配置
      tags:
        - Settings
    put:
      consumes:
        - application/json
      description: 更新网站的基础配置信息，包括默认存储策略。所有字段都是可选的，只更新提供的字段。
      parameters:
        - description: 要更新的网站基础配置项，例如 `default_storage_strategy_id`
          in: body
          name: settings
          required: true
          schema:
            $ref: "#/definitions/dtos.UpdateBasicSiteSettingsInputDTO"
      produces:
        - application/json
      responses:
        "200":
          description: 网站基础配置更新成功
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    $ref: "#/definitions/models.BasicSiteSetting"
                type: object
        "400":
          description: 请求参数错误或校验失败
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 更新网站基础配置
      tags:
        - Settings
  /settings/email:
    get:
      description: 获取系统的邮件服务器配置信息 (SMTP服务器, 端口, 用户名, 发件人邮箱, 发件人名称, 邮件通知开关)。不包含敏感信息如密码。
      produces:
        - application/json
      responses:
        "200":
          description: 成功获取邮件配置
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    $ref: "#/definitions/dtos.BasicSitePublicSettingsDTO"
                type: object
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 获取邮件配置
      tags:
        - Settings
    put:
      consumes:
        - application/json
      description: 更新系统的邮件服务器配置信息。所有字段都是可选的。成功后返回更新后的公开邮件配置。
      parameters:
        - description: 要更新的邮件配置项
          in: body
          name: settings
          required: true
          schema:
            $ref: "#/definitions/dtos.UpdateEmailSettingsDTO"
      produces:
        - application/json
      responses:
        "200":
          description: 邮件配置更新成功
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    $ref: "#/definitions/dtos.BasicSitePublicSettingsDTO"
                type: object
        "400":
          description: 请求参数错误或校验失败
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 更新邮件配置
      tags:
        - Settings
  /settings/email/test:
    post:
      consumes:
        - application/json
      description: 发送一封测试邮件到指定的邮箱，以验证邮件服务器配置是否正确。
      parameters:
        - description: 测试邮件接收邮箱
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/dtos.TestEmailDTO"
      produces:
        - application/json
      responses:
        "200":
          description: 测试邮件发送成功
          schema:
            $ref: "#/definitions/utils.Response"
        "400":
          description: 请求参数错误或校验失败
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误或邮件发送失败
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 测试邮件配置
      tags:
        - Settings
  /settings/image-processing:
    get:
      description: 获取系统的图片处理配置信息 (例如：图片自动压缩, 压缩质量, 水印设置, 上传大小限制, 允许格式, 缩略图等)
      produces:
        - application/json
      responses:
        "200":
          description: 成功获取图片处理配置
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    $ref: "#/definitions/models.ImageProcessingSetting"
                type: object
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 获取图片处理配置
      tags:
        - Settings
    put:
      consumes:
        - application/json
      description: 更新系统的图片处理配置信息。所有字段都是可选的，只更新提供的字段。
      parameters:
        - description: 要更新的图片处理配置项
          in: body
          name: settings
          required: true
          schema:
            $ref: "#/definitions/dtos.UpdateImageProcessingSettingDTO"
      produces:
        - application/json
      responses:
        "200":
          description: 图片处理配置更新成功
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    $ref: "#/definitions/models.ImageProcessingSetting"
                type: object
        "400":
          description: 请求参数错误或校验失败
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 更新图片处理配置
      tags:
        - Settings
  /settings/security:
    get:
      description: 获取系统的安全配置信息 (例如：登录尝试次数限制, 账户锁定策略, IP黑白名单, 密码策略等)
      produces:
        - application/json
      responses:
        "200":
          description: 成功获取安全配置
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    $ref: "#/definitions/models.SecuritySetting"
                type: object
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 获取安全配置
      tags:
        - Settings
    put:
      consumes:
        - application/json
      description: 更新系统的安全配置信息。所有字段都是可选的，只更新提供的字段。
      parameters:
        - description: 要更新的安全配置项
          in: body
          name: settings
          required: true
          schema:
            $ref: "#/definitions/dtos.UpdateSecuritySettingsInputDTO"
      produces:
        - application/json
      responses:
        "200":
          description: 安全配置更新成功
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    $ref: "#/definitions/models.SecuritySetting"
                type: object
        "400":
          description: 请求参数错误或校验失败
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 更新安全配置
      tags:
        - Settings
  /shares:
    post:
      consumes:
        - application/json
      description: 为图片或相册创建分享链接
      parameters:
        - description: 分享请求参数
          in: body
          name: share
          required: true
          schema:
            $ref: "#/definitions/dtos.CreateShareLinkRequest"
      produces:
        - application/json
      responses:
        "201":
          description: 分享链接创建成功
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    $ref: "#/definitions/dtos.ShareResponseDTO"
                type: object
        "400":
          description: 请求参数错误
          schema:
            $ref: "#/definitions/utils.Response"
        "401":
          description: 未经授权
          schema:
            $ref: "#/definitions/utils.Response"
        "403":
          description: 禁止访问（例如，资源不属于当前用户）
          schema:
            $ref: "#/definitions/utils.Response"
        "404":
          description: 资源未找到
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 创建分享链接
      tags:
        - Share
  /shares/{token}:
    delete:
      description: 根据 Token 删除一个分享链接
      parameters:
        - description: 分享Token
          in: path
          name: token
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: 分享链接删除成功
          schema:
            $ref: "#/definitions/utils.Response"
        "400":
          description: Token 不能为空
          schema:
            $ref: "#/definitions/utils.Response"
        "401":
          description: 未经授权
          schema:
            $ref: "#/definitions/utils.Response"
        "403":
          description: 禁止访问（例如，不是分享的创建者）
          schema:
            $ref: "#/definitions/utils.Response"
        "404":
          description: 分享链接未找到
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 删除分享链接
      tags:
        - Share
    get:
      description: 通过分享 Token 访问图片或相册内容（无需认证）
      parameters:
        - description: 分享Token
          in: path
          name: token
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: 获取分享内容成功
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    type: object
                type: object
        "404":
          description: 分享链接不存在或已过期
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      summary: 获取分享内容
      tags:
        - Share
  /user/storage:
    get:
      description: 获取当前登录用户有权使用的所有存储策略。
      produces:
        - application/json
      responses:
        "200":
          description: 成功响应，返回可用存储策略列表
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    items:
                      $ref: "#/definitions/dtos.UserStorageStrategyDTO"
                    type: array
                type: object
        "401":
          description: 用户未认证
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 获取可用存储策略
      tags:
        - Users
        - Storage
  /users/{id}/roles:
    get:
      consumes:
        - application/json
      description: 获取指定用户的当前角色
      parameters:
        - description: 用户ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: 成功
          schema:
            allOf:
              - $ref: "#/definitions/utils.Response"
              - properties:
                  data:
                    $ref: "#/definitions/dtos.RoleResponseDTO"
                type: object
        "400":
          description: 无效ID
          schema:
            $ref: "#/definitions/utils.Response"
        "404":
          description: 用户或其角色未找到
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 获取用户的角色
      tags:
        - Roles
  /users/{user_id}/roles:
    put:
      consumes:
        - application/json
      description: 将指定用户分配给指定的角色 (目前系统为单角色模型)
      parameters:
        - description: 用户ID
          in: path
          name: user_id
          required: true
          type: integer
        - description: 角色分配信息
          in: body
          name: role_assign_input
          required: true
          schema:
            $ref: "#/definitions/dtos.AssignRoleDTO"
      produces:
        - application/json
      responses:
        "200":
          description: 分配成功
          schema:
            $ref: "#/definitions/utils.Response"
        "400":
          description: 请求参数错误或无效ID
          schema:
            $ref: "#/definitions/utils.Response"
        "404":
          description: 用户或角色未找到
          schema:
            $ref: "#/definitions/utils.Response"
        "500":
          description: 服务器内部错误
          schema:
            $ref: "#/definitions/utils.Response"
      security:
        - ApiKeyAuth: []
      summary: 为用户分配角色
      tags:
        - Roles
schemes:
  - http
  - https
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"

