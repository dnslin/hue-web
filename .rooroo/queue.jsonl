{"taskId":"ROO#SUB_TASK_A1B2C3_S001_20250605153201_A1B2","parent_task_id":"ROO#TASK_20250605153100_A1B2C3","status":"Pending","suggested_mode":"rooroo-developer","goal_for_expert":"根据 [`user_store_refactor_plan.md`](../../../../user_store_refactor_plan.md:131) 第 6 节的目录结构建议，在 `lib/store/` 下创建 `user/` 目录。在 `lib/store/user/` 目录中创建以下空的 TypeScript 文件：`userData.store.ts`, `userFilter.store.ts`, `userSelection.store.ts`, `userBatch.store.ts`, `userCache.store.ts`, `userHydration.store.ts`。同时创建 `lib/store/user/index.ts`。确保所有文件路径正确。","context_file_path":".rooroo/tasks/ROO#SUB_TASK_A1B2C3_S001_20250605153201_A1B2/context.md","auto_proceed_plan":true}
{"taskId":"ROO#SUB_TASK_A1B2C3_S002_20250605153202_A1B2","parent_task_id":"ROO#TASK_20250605153100_A1B2C3","status":"Pending","suggested_mode":"rooroo-developer","goal_for_expert":"实现 [`lib/store/user/userData.store.ts`](../../../../lib/store/user/userData.store.ts)。参考 [`user_store_refactor_plan.md`](../../../../user_store_refactor_plan.md:197) 第 8.2 节。定义 `UserDataState` 和 `UserDataActions`。迁移核心用户数据 (`users`)、细化的 `loading` 和 `error` 状态。迁移 `fetchUsers`, `refreshUsers`, `createUser`, `updateUser`, `deleteUser`, `changeUserStatus` 方法。实现或调整 `_handleApiCall`。确保与 `userCache.store` (将在后续任务中实现) 的交互逻辑。引用原始文件 [`lib/store/user-store.ts`](../../../../lib/store/user-store.ts:1) 和相关 actions/types ([`lib/actions/users/user.actions.ts`](../../../../lib/actions/users/user.actions.ts:1), [`lib/types/user.ts`](../../../../lib/types/user.ts:1))。","context_file_path":".rooroo/tasks/ROO#SUB_TASK_A1B2C3_S002_20250605153202_A1B2/context.md","auto_proceed_plan":true}
{"taskId":"ROO#SUB_TASK_A1B2C3_S003_20250605153203_A1B2","parent_task_id":"ROO#TASK_20250605153100_A1B2C3","status":"Pending","suggested_mode":"rooroo-developer","goal_for_expert":"实现 [`lib/store/user/userCache.store.ts`](../../../../lib/store/user/userCache.store.ts)。参考 [`user_store_refactor_plan.md`](../../../../user_store_refactor_plan.md:205) 第 8.3 节。定义 `UserCacheState` 和 `UserCacheActions`。实现 `markAsFetched`, `invalidateCache`, `updateCacheVersion`, `checkIfStale` 方法。确保 `invalidateCache` 和 `updateCacheVersion` 调用 [`lib/utils/cacheManager.ts`](../../../../lib/utils/cacheManager.ts:327) 中的 `cacheUtils.clearUserCache()`。","context_file_path":".rooroo/tasks/ROO#SUB_TASK_A1B2C3_S003_20250605153203_A1B2/context.md","auto_proceed_plan":true}
{"taskId":"ROO#SUB_TASK_A1B2C3_S004_20250605153204_A1B2","parent_task_id":"ROO#TASK_20250605153100_A1B2C3","status":"Pending","suggested_mode":"rooroo-developer","goal_for_expert":"实现 [`lib/store/user/userFilter.store.ts`](../../../../lib/store/user/userFilter.store.ts)。参考 [`user_store_refactor_plan.md`](../../../../user_store_refactor_plan.md:209) 第 8.4 节。定义 `UserFilterState` 和 `UserFilterActions`。迁移 `filters`, `pagination`, `isFilterOpen`, `hasActiveFilters` 状态。迁移相关方法，并在必要时调用 `userData.store` 的 `fetchUsers`。配置 `persist` 中间件持久化筛选条件。实现 `_recalculateActiveFilters`。","context_file_path":".rooroo/tasks/ROO#SUB_TASK_A1B2C3_S004_20250605153204_A1B2/context.md","auto_proceed_plan":true}
{"taskId":"ROO#SUB_TASK_A1B2C3_S005_20250605153205_A1B2","parent_task_id":"ROO#TASK_20250605153100_A1B2C3","status":"Pending","suggested_mode":"rooroo-developer","goal_for_expert":"实现 [`lib/store/user/userSelection.store.ts`](../../../../lib/store/user/userSelection.store.ts)。参考 [`user_store_refactor_plan.md`](../../../../user_store_refactor_plan.md:216) 第 8.5 节。定义 `UserSelectionState` 和 `UserSelectionActions`。迁移选择相关状态和方法。确保 `selectAll` 和 `toggleAllSelection` 能访问 `userData.store` 的用户数据。实现 `_updateSelectionState`。","context_file_path":".rooroo/tasks/ROO#SUB_TASK_A1B2C3_S005_20250605153205_A1B2/context.md","auto_proceed_plan":true}
{"taskId":"ROO#SUB_TASK_A1B2C3_S006_20250605153206_A1B2","parent_task_id":"ROO#TASK_20250605153100_A1B2C3","status":"Pending","suggested_mode":"rooroo-developer","goal_for_expert":"实现 [`lib/store/user/userBatch.store.ts`](../../../../lib/store/user/userBatch.store.ts)。参考 [`user_store_refactor_plan.md`](../../../../user_store_refactor_plan.md:222) 第 8.6 节。定义 `UserBatchState` 和 `UserBatchActions`。迁移批量操作的 `loading` 和 `error` 状态及相关方法。在成功回调中调用 `userData.store.refreshUsers()` 和 `userSelection.store.unselectAll()`。实现 `_handleBatchApiCall`。","context_file_path":".rooroo/tasks/ROO#SUB_TASK_A1B2C3_S006_20250605153206_A1B2/context.md","auto_proceed_plan":true}
{"taskId":"ROO#SUB_TASK_A1B2C3_S007_20250605153207_A1B2","parent_task_id":"ROO#TASK_20250605153100_A1B2C3","status":"Pending","suggested_mode":"rooroo-developer","goal_for_expert":"实现 [`lib/store/user/userHydration.store.ts`](../../../../lib/store/user/userHydration.store.ts)。参考 [`user_store_refactor_plan.md`](../../../../user_store_refactor_plan.md:228) 第 8.7 节。定义 `UserHydrationState` 和 `UserHydrationActions`。实现 `setHydrated` 方法。准备在其他持久化 store (如 `userFilter.store`) 的 `onRehydrateStorage` 回调中调用此 store 的 `setHydrated(true)`。","context_file_path":".rooroo/tasks/ROO#SUB_TASK_A1B2C3_S007_20250605153207_A1B2/context.md","auto_proceed_plan":true}
{"taskId":"ROO#SUB_TASK_A1B2C3_S008_20250605153208_A1B2","parent_task_id":"ROO#TASK_20250605153100_A1B2C3","status":"Pending","suggested_mode":"rooroo-developer","goal_for_expert":"根据 [`user_store_refactor_plan.md`](../../../../user_store_refactor_plan.md:232) 第 8.8 节，识别并更新项目中所有使用了旧 `useUserStore` 及其派生 hooks 的UI组件。修改这些组件，使其从新的、拆分后的对应 store (如 `useUserDataStore`, `useUserFilterStore` 等) 中获取状态和调用方法。提供一份更新的主要受影响组件及其对应新 store 引用的清单作为交付成果的一部分。","context_file_path":".rooroo/tasks/ROO#SUB_TASK_A1B2C3_S008_20250605153208_A1B2/context.md","auto_proceed_plan":true}
{"taskId":"ROO#SUB_TASK_A1B2C3_S009_20250605153209_A1B2","parent_task_id":"ROO#TASK_20250605153100_A1B2C3","status":"Pending","suggested_mode":"rooroo-developer","goal_for_expert":"根据 [`user_store_refactor_plan.md`](../../../../user_store_refactor_plan.md:235) 第 8.9 节和第 5 节的示例，更新或创建新的自定义 hooks (选择器)。确保它们从正确的拆分后 store 中选取状态。如果创建了 [`lib/store/user/index.ts`](../../../../lib/store/user/index.ts)，从中统一导出所有新的 hooks 和 stores。","context_file_path":".rooroo/tasks/ROO#SUB_TASK_A1B2C3_S009_20250605153209_A1B2/context.md","auto_proceed_plan":true}
{"taskId":"ROO#SUB_TASK_A1B2C3_S010_20250605153210_A1B2","parent_task_id":"ROO#TASK_20250605153100_A1B2C3","status":"Pending","suggested_mode":"rooroo-developer","goal_for_expert":"根据 [`user_store_refactor_plan.md`](../../../../user_store_refactor_plan.md:238) 第 8.10 节和父任务上下文 ([`.rooroo/tasks/ROO#TASK_20250605153100_A1B2C3/context.md`](../../../../.rooroo/tasks/ROO#TASK_20250605153100_A1B2C3/context.md:27)) 第 27 点，为已重构的用户管理功能定义关键测试点或测试步骤清单。涵盖列表展示、筛选、分页、单用户操作、批量操作、选择功能、缓存表现、持久化筛选条件的恢复等。执行基本的冒烟测试以确保核心功能按预期工作，并记录测试结果。","context_file_path":".rooroo/tasks/ROO#SUB_TASK_A1B2C3_S010_20250605153210_A1B2/context.md","auto_proceed_plan":true}
{"taskId":"ROO#SUB_TASK_A1B2C3_S011_20250605153211_A1B2","parent_task_id":"ROO#TASK_20250605153100_A1B2C3","status":"Pending","suggested_mode":"rooroo-developer","goal_for_expert":"根据 [`user_store_refactor_plan.md`](../../../../user_store_refactor_plan.md:241) 第 8.11 节，对所有新创建和修改的代码进行最终检查、格式化和 linting。确认所有功能基本迁移完成且通过基本测试后，删除旧的 [`lib/store/user-store.ts`](../../../../lib/store/user-store.ts:1) 文件。准备代码提交，确保符合项目编码规范。","context_file_path":".rooroo/tasks/ROO#SUB_TASK_A1B2C3_S011_20250605153211_A1B2/context.md","auto_proceed_plan":true}